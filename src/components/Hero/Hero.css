/* src/components/Hero/Hero.css */

.hero-section {
    height: 50vh;
    min-height: 350px;
    /* background-color: #6c757d; */ /* Fallback color - maybe use a variable? */
    background-color: var(--text-secondary); /* Using variable as fallback */
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 20px;
    color: #ffffff; /* White text usually works on overlay */
    border-radius: 8px;
    margin-bottom: 30px;
    position: relative; /* Needed if overlay is separate */
    overflow: hidden; /* Ensure rounded corners clip background */
  }
  
  /* Apply overlay using the background-image property in JS for simplicity */
  /* Or use a ::before pseudo-element: */
  /*
  .hero-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: var(--hero-overlay-color);
      z-index: 1;
  }
  .hero-content {
      position: relative;
      z-index: 2; // Ensure content is above pseudo-element overlay
      max-width: 800px;
  }
  */
  
  .hero-content {
      max-width: 800px;
  }
  
  .hero-title {
    font-size: 2.8rem;
    font-weight: bold;
    margin-bottom: 15px;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.7); /* Shadow helps readability */
  }
  
  .hero-subtitle {
    font-size: 1.2rem;
    margin-bottom: 30px;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
  }
  
  .hero-search-form {
    display: flex;
    justify-content: center;
    align-items: center;
    /* background-color: rgba(255, 255, 255, 0.95); */ /* BEFORE */
    /* Use variable with alpha or dedicated overlay variable */
    background-color: rgba(var(--background-secondary-rgb, 255, 255, 255), 0.95); /* Need to define --background-secondary-rgb or adjust */
    /* Fallback: */
    /* background-color: var(--background-secondary); */
    padding: 10px;
    border-radius: 50px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2); /* Keep shadow dark? */
    max-width: 600px;
    width: 100%;
    margin: 0 auto;
  }
  /* Define RGB version for use in rgba() - add to :root and [data-theme=dark] */
  :root { --background-secondary-rgb: 255, 255, 255; }
  [data-theme='dark'] { --background-secondary-rgb: 30, 30, 30; }
  
  
  .hero-search-input {
    flex-grow: 1;
    padding: 12px 20px;
    border: none;
    font-size: 1rem;
    background-color: transparent;
    /* color: #333; */ /* BEFORE */
    color: var(--text-primary); /* AFTER - Text inside light search box */
    outline: none;
  }
  .hero-search-input::placeholder {
    /* color: #666; */ /* BEFORE */
    color: var(--text-secondary); /* AFTER */
  }
  
  .hero-search-button {
    padding: 10px 25px;
    border: none;
    /* background-color: #007bff; */ /* BEFORE */
    background-color: var(--button-primary-bg); /* AFTER */
    /* color: white; */ /* BEFORE */
    color: var(--button-primary-text); /* AFTER */
    font-size: 1rem;
    font-weight: bold;
    border-radius: 30px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-left: 5px;
  }
  
  .hero-search-button:hover {
    /* background-color: #0056b3; */ /* BEFORE */
    background-color: var(--button-primary-hover-bg); /* AFTER */
  }
  
  /* Responsive Adjustments */
  @media screen and (max-width: 768px) {
    .hero-title { font-size: 2.2rem; }
    .hero-subtitle { font-size: 1rem; }
    .hero-search-form {
      flex-direction: column;
      border-radius: 8px;
      padding: 15px;
      /* background-color: rgba(255, 255, 255, 0.9); */
      background-color: rgba(var(--background-secondary-rgb), 0.9);
    }
    .hero-search-input { width: 100%; margin-bottom: 10px; text-align: center; }
    .hero-search-button { width: 100%; margin-left: 0; }
  }